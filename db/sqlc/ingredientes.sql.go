// Code generated by sqlc. DO NOT EDIT.
// source: ingredientes.sql

package db

import (
	"context"
)

const addIngrediente = `-- name: AddIngrediente :one
INSERT INTO Ingredientes (
  nome,
  ativo
) VALUES (
  $1, $2
) RETURNING id, nome, ativo, criado_em
`

type AddIngredienteParams struct {
	Nome  string `json:"nome"`
	Ativo bool   `json:"ativo"`
}

func (q *Queries) AddIngrediente(ctx context.Context, arg AddIngredienteParams) (Ingrediente, error) {
	row := q.db.QueryRowContext(ctx, addIngrediente, arg.Nome, arg.Ativo)
	var i Ingrediente
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Ativo,
		&i.CriadoEm,
	)
	return i, err
}

const deleteIngrediente = `-- name: DeleteIngrediente :exec
DELETE FROM Ingredientes 
WHERE id = $1
`

func (q *Queries) DeleteIngrediente(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngrediente, id)
	return err
}

const getIngreditente = `-- name: GetIngreditente :one
SELECT id, nome, ativo, criado_em FROM Ingredientes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIngreditente(ctx context.Context, id int64) (Ingrediente, error) {
	row := q.db.QueryRowContext(ctx, getIngreditente, id)
	var i Ingrediente
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Ativo,
		&i.CriadoEm,
	)
	return i, err
}

const listIngrediente = `-- name: ListIngrediente :many
SELECT id, nome, ativo, criado_em FROM Ingredientes
ORDER BY nome
LIMIT $1
OFFSET $2
`

type ListIngredienteParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIngrediente(ctx context.Context, arg ListIngredienteParams) ([]Ingrediente, error) {
	rows, err := q.db.QueryContext(ctx, listIngrediente, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingrediente{}
	for rows.Next() {
		var i Ingrediente
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Ativo,
			&i.CriadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngrediente = `-- name: UpdateIngrediente :one
UPDATE Ingredientes 
SET nome = $2 , ativo = $3
WHERE id = $1
RETURNING id, nome, ativo, criado_em
`

type UpdateIngredienteParams struct {
	ID    int64  `json:"id"`
	Nome  string `json:"nome"`
	Ativo bool   `json:"ativo"`
}

func (q *Queries) UpdateIngrediente(ctx context.Context, arg UpdateIngredienteParams) (Ingrediente, error) {
	row := q.db.QueryRowContext(ctx, updateIngrediente, arg.ID, arg.Nome, arg.Ativo)
	var i Ingrediente
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Ativo,
		&i.CriadoEm,
	)
	return i, err
}
