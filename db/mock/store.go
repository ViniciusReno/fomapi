// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViniciusReno/fomapi/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/ViniciusReno/fomapi/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddIngredient mocks base method.
func (m *MockStore) AddIngredient(arg0 context.Context, arg1 db.AddIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIngredient indicates an expected call of AddIngredient.
func (mr *MockStoreMockRecorder) AddIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIngredient", reflect.TypeOf((*MockStore)(nil).AddIngredient), arg0, arg1)
}

// DeleteIngredient mocks base method.
func (m *MockStore) DeleteIngredient(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockStoreMockRecorder) DeleteIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockStore)(nil).DeleteIngredient), arg0, arg1)
}

// GetIngreditent mocks base method.
func (m *MockStore) GetIngreditent(arg0 context.Context, arg1 int64) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngreditent", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngreditent indicates an expected call of GetIngreditent.
func (mr *MockStoreMockRecorder) GetIngreditent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngreditent", reflect.TypeOf((*MockStore)(nil).GetIngreditent), arg0, arg1)
}

// ListIngredients mocks base method.
func (m *MockStore) ListIngredients(arg0 context.Context, arg1 db.ListIngredientsParams) ([]db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredients", arg0, arg1)
	ret0, _ := ret[0].([]db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredients indicates an expected call of ListIngredients.
func (mr *MockStoreMockRecorder) ListIngredients(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredients", reflect.TypeOf((*MockStore)(nil).ListIngredients), arg0, arg1)
}

// UpdateIngredient mocks base method.
func (m *MockStore) UpdateIngredient(arg0 context.Context, arg1 db.UpdateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockStoreMockRecorder) UpdateIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockStore)(nil).UpdateIngredient), arg0, arg1)
}
